# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateInjuryInput {
  afflicted_stat: Stat
  crippling: Boolean = false
  label: String!
  niggling: Boolean = false
}

input CreatePlayerInput {
  agility: Int!
  armour: Int!
  injuries: [ID!] = []
  level: Int = 1
  movement: Int!
  name: String!
  position: ID!
  skills: [ID!] = []
  spp: Int = 0
  strength: Int!
  value: Int = 0
}

input CreatePositionInput {
  agility: Int!
  armour: Int!
  cost: Int!
  max_per_team: Int!
  movement: Int!
  name: String!
  prebuilt_skills: [ID!]
  race: ID!
  strength: Int!
}

input CreateRaceInput {
  benefits: [String!]
  description: String
  drawbacks: [String!]
  name: String!
}

input CreateSkillInput {
  category: SkillCategory!
  description: String
  name: String!
}

input CreateTeamInput {
  defeats: Int = 0
  draws: Int = 0
  finances: Int = 1000000
  name: String!
  players: [ID!] = []
  race: ID!
  tv: Int = 0
  victories: Int = 0
  warcry: String
}

type Injury {
  _id: ID!
  afflicted_stat: Stat
  crippling: Boolean!
  label: String!
  niggling: Boolean!
}

input ListInjuryInput {
  _id: ID
  afflicted_stat: Stat
  crippling: Boolean
  label: String
  niggling: Boolean
}

input ListPlayerInput {
  _id: ID
  agility: Int
  armour: Int
  injuries: [ID!]
  level: Int
  movement: Int
  name: String
  position: ID
  skills: [ID!]
  spp: Int
  strength: Int
  value: Int
}

input ListPositionInput {
  _id: ID
  agility: Int
  armour: Int
  cost: Int
  movement: Int
  name: String
  prebuilt_skills: [ID!]
  race: ID
  strength: Int
}

input ListRaceInput {
  _id: ID
  name: String
}

input ListSkillInput {
  _id: ID
  category: SkillCategory
  description: String
  name: String
}

input ListTeamInput {
  _id: ID
  finances: Int
  name: String
  race: ID
  tv: Int
  warcry: String
}

type Mutation {
  createInjury(payload: CreateInjuryInput!): Injury!
  createPlayer(payload: CreatePlayerInput!): Player!
  createPosition(payload: CreatePositionInput!): Position!
  createRace(payload: CreateRaceInput!): Race!
  createSkill(payload: CreateSkillInput!): Skill!
  createTeam(payload: CreateTeamInput!): Team!
  deleteInjury(_id: ID!): Injury!
  deletePlayer(_id: ID!): Player!
  deletePosition(_id: ID!): Position!
  deleteRace(_id: ID!): Race!
  deleteSkill(_id: ID!): Skill!
  deleteTeam(_id: ID!): Team!
  updateInjury(payload: UpdateInjuryInput!): Injury!
  updatePlayer(payload: UpdatePlayerInput!): Player!
  updatePosition(payload: UpdatePositionInput!): Position!
  updateRace(payload: UpdateRaceInput!): Race!
  updateSkill(payload: UpdateSkillInput!): Skill!
  updateTeam(payload: UpdateTeamInput!): Team!
}

type Player {
  _id: ID!
  agility: Int!
  armour: Int!
  injuries(populate: Boolean!): [Injury!]!
  level: Int!
  movement: Int!
  name: String!
  position(populate: Boolean!): Position!
  skills(populate: Boolean!): [Skill!]!
  spp: Int!
  strength: Int!
  value: Int!
}

type Position {
  _id: ID!
  agility: Int!
  armour: Int!
  cost: Int!
  max_per_team: Int!
  name: String!
  prebuilt_skills(populate: Boolean!): [Skill!]!
  race(populate: Boolean!): Race!
  strength: Int!
}

type Query {
  injury(_id: ID!): Injury!
  injurys(filters: ListInjuryInput): [Injury!]!
  player(_id: ID!): Player!
  players(filters: ListPlayerInput): [Player!]!
  position(_id: ID!): Position!
  positions(filters: ListPositionInput): [Position!]!
  race(_id: ID!): Race!
  races(filters: ListRaceInput): [Race!]!
  skill(_id: ID!): Skill!
  skills(filters: ListSkillInput): [Skill!]!
  team(_id: ID!): Team!
  teams(filters: ListTeamInput): [Team!]!
}

type Race {
  _id: ID!
  benefits: [String!]
  description: String
  drawbacks: [String!]
  name: String!
}

type Skill {
  _id: ID!
  category: SkillCategory!
  description: String
  name: String!
}

"""Categories for skills"""
enum SkillCategory {
  AGILITY
  EXTRAORDINARY
  GENERAL
  MUTATION
  PASSING
  STRENGTH
}

"""Different player statistics"""
enum Stat {
  AGILITY
  ARMOUR
  MOVEMENT
  STRENGTH
}

type Team {
  _id: ID!
  defeats: Int!
  draws: Int!
  finances: Int!
  name: String!
  players: [Player!]!
  race(populate: Boolean!): Race!
  tv: Int!
  victories: Int!
  warcry: String
}

input UpdateInjuryInput {
  _id: ID!
  afflicted_stat: Stat
  crippling: Boolean
  label: String
  niggling: Boolean
}

input UpdatePlayerInput {
  _id: ID!
  agility: Int
  armour: Int
  injuries: [ID!]
  level: Int
  movement: Int
  name: String
  position: ID
  skills: [ID!]
  spp: Int
  strength: Int
  value: Int
}

input UpdatePositionInput {
  _id: ID!
  agility: Int
  armour: Int
  cost: Int
  max_per_team: Int
  movement: Int
  name: String
  prebuilt_skills: [ID!]
  race: ID
  strength: Int
}

input UpdateRaceInput {
  _id: ID!
  benefits: [String!]
  description: String
  drawbacks: [String!]
  name: String
}

input UpdateSkillInput {
  _id: ID!
  category: SkillCategory
  description: String
  name: String
}

input UpdateTeamInput {
  _id: ID!
  finances: Int
  name: String
  race: ID
  tv: Int
  warcry: String
}
